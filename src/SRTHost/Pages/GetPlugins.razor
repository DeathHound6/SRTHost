@page "/GetPlugins"
@using System.Net.Http.Json;
@using System.Text.Json;
@inject NavigationManager NavigationManager;
@inject IHttpClientFactory httpClientFactory
<PageTitle>Get Plugins</PageTitle>
<h3>Get Plugins</h3>

<div>
    @if (pluginHost is null || MainJson is null || ManifestHost is null || ManifestPlugins is null)
    {
        <em>Loading...</em>
    }
    else
    {
        @foreach (((MainPluginEntry mainPluginEntry, ManifestPluginJson? manifestPluginJson), int index) in ManifestPlugins.Select((mainPluginEntry, index) => (mainPluginEntry.Value, index)))
        {
            <div class="@GetItemCssClass(index) w-100 d-flex flex-wrap justify-content-between align-items-center p-2 gap-1">
                <b>@mainPluginEntry.Name</b> (@mainPluginEntry.Platform.ToString()) @mainPluginEntry.Type.ToString()
                <div class="d-flex flex-wrap gap-2">
                    @if (pluginHost.LoadedPlugins.ContainsKey(mainPluginEntry.Name))
                    {
                        <a href="api/v1/Plugin/@mainPluginEntry.Name/Reload" class="btn btn-primary btn-custom-width" rel="noreferrer" target="_blank">Reload</a>
                    }
                    else
                    {
                        <a href="api/v1/Plugin/@mainPluginEntry.Name/Load" class="btn btn-primary btn-custom-width" rel="noreferrer" target="_blank">Load</a>
                    }
                </div>
        </div>
        }
    }
</div>

@code {
    private string GetItemCssClass(int index) => index % 2 == 0 ? "even" : "odd";

    private MainJson? MainJson { get; set; }
    private ManifestHostJson? ManifestHost { get; set; }
    private IDictionary<string, (MainPluginEntry, ManifestPluginJson?)>? ManifestPlugins { get; set; }
    protected override async Task OnInitializedAsync()
    {
        using (HttpClient httpClient = httpClientFactory.CreateClient())
        {
            httpClient.BaseAddress = new Uri(NavigationManager.BaseUri);

            //MainJson = await httpClient.GetFromJsonAsync<MainJson>("https://raw.githubusercontent.com/SpeedRunTool/SRTPlugins/main/main.json", System.Text.Json.JsonSerializerOptions.Default);
            MainJson = await httpClient.GetFromJsonAsync<MainJson>("/api/v1/Plugin/DebugMain", System.Text.Json.JsonSerializerOptions.Default);

            //ManifestHost = await httpClient.GetFromJsonAsync<ManifestHostJson>(MasterJson?.Host.ManifestURL, System.Text.Json.JsonSerializerOptions.Default);
            ManifestHost = await httpClient.GetFromJsonAsync<ManifestHostJson>("/api/v1/Plugin/DebugManifestHost", System.Text.Json.JsonSerializerOptions.Default);

            //ManifestPlugins = MainJson?.Plugins.ToDictionary(kvp => kvp.Name, (kvp) => (kvp, httpClient.GetFromJsonAsync<ManifestPluginJson>(kvp.ManifestURL, System.Text.Json.JsonSerializerOptions.Default).GetAwaiter().GetResult()));
            ManifestPlugins = new Dictionary<string, (MainPluginEntry, ManifestPluginJson?)>()
            {
                { "SRTConsumerTest1", (MainJson!.Plugins.First(p => p.Name == "SRTConsumerTest1"), httpClient.GetFromJsonAsync<ManifestPluginJson>("/api/v1/Plugin/DebugManifestPlugin", System.Text.Json.JsonSerializerOptions.Default).GetAwaiter().GetResult()) }
            };
        }

        await base.OnInitializedAsync();
    }
}